#Import Flask Libraryfrom flask import Flask, render_template, request, session, url_for, redirectimport pymysql.cursors#Initialize the app from Flaskapp = Flask(__name__)#Configure MySQLconn = pymysql.connect(host='localhost', #server(same computer)                       user='root',                       password='',                       db='Online Airline Reservation System', #database connected                       charset='utf8mb4',                       cursorclass=pymysql.cursors.DictCursor)#Define a route to hello function@app.route('/') def hello():	return render_template('index.html')##need we create a 'index.html' and write html codes to initialize it?##YES@app.route('/public_search', methods=['GET', 'POST'])def public_search():    source = request.form['source_city/airport']    arrival = request.form['destination_city/airport']        cursor = conn.cursor();    query = 'SELECT * FROM flight WHERE departure_airport = %s AND arrival_airport = %s ORDER BY departure_time DESC'    cursor.execute(query, (source, arrival))    data1 = cursor.fetchall()     for each in data1:        print(each) ##key?    cursor.close()    return render_template('index.html', posts = data1)@app.route('/public_status', methods=['GET', 'POST'])def public_status():    num = request.form['flight_num']        cursor = conn.cursor();    query = 'SELECT * FROM flight WHERE flight_num = %s ORDER BY flight_num DESC'    cursor.execute(query, (num))    data2 = cursor.fetchall()     for each in data2:        print(each['status']) ##key?    cursor.close()    return render_template('index.html', posts2 = data2)'''@app.route('/post', methods=['GET', 'POST'])def post():	username = session['username']	cursor = conn.cursor();	blog = request.form['blog']	query = 'INSERT INTO blog (blog_post, username) VALUES(%s, %s)'	cursor.execute(query, (blog, username))	conn.commit() #	cursor.close()	return redirect(url_for('home'))## url_for("name of the function redircting to ")'''    #Define route for login@app.route('/login')def login():	return render_template('login.html')@app.route('/login_customer')def login_customer():    return render_template('login_customer.html')@app.route('/login_agent')def login_agent():    return render_template('login_agent.html')@app.route('/login_staff')def login_staff():    return render_template('login_staff.html')#Define route for register@app.route('/register')def register():	return render_template('register.html')@app.route('/register_customer')def register_customer():	return render_template('register_customer.html')@app.route('/register_agent')def register_agent():	return render_template('register_agent.html')@app.route('/register_staff')def register_staff():	return render_template('register_staff.html')#Authenticates the login#get: getting info, insecure; post: more secure    @app.route('/loginAuth_customer', methods=['GET', 'POST'])#default: GETdef loginAuth_customer():	#grabs information from the forms	username = request.form['username']	password = request.form['password']	cursor = conn.cursor()	query = 'SELECT * FROM customer WHERE name = %s and password = %s'	cursor.execute(query, (username, password))	data = cursor.fetchone()	cursor.close()	error = None	if(data):		session['username_customer'] = username		return redirect(url_for('home_customer'))	else:		#returns an error message to the html page		error = 'Invalid login or username'		return render_template('login_customer.html', error=error)@app.route('/loginAuth_agent', methods=['GET', 'POST'])#default: GETdef loginAuth_agent():	#grabs information from the forms	email = request.form['email']	password = request.form['password']	cursor = conn.cursor()	query = 'SELECT * FROM booking_agent WHERE email = %s and password = %s'	cursor.execute(query, (email, password))		data = cursor.fetchone()	cursor.close()	error = None	if(data):		session['email_agent'] = email		return redirect(url_for('home_agent'))	else:		#returns an error message to the html page		error = 'Invalid login or email'		return render_template('login_agent.html', error=error)@app.route('/loginAuth_staff', methods=['GET', 'POST'])#default: GETdef loginAuth_staff():	#grabs information from the forms	username = request.form['username']	password = request.form['password']	cursor = conn.cursor()	query = 'SELECT * FROM airline_staff WHERE username = %s and password = %s'	cursor.execute(query, (username, password))	data = cursor.fetchone()	cursor.close()	error = None	if(data):		session['username_staff'] = username		return redirect(url_for('home_staff'))	else:		#returns an error message to the html page		error = 'Invalid login or email'		return render_template('login_agent.html', error=error)#Authenticates the register@app.route('/registerAuth_customer', methods=['GET', 'POST'])def registerAuth_customer():	#grabs information from the forms #should be method POST    email = request.form['email']    name = request.form['name']    password = request.form['password']    building = request.form['building_number']    street = request.form['street']    city = request.form['city']    state = request.form['state']    phone = request.form['phone_number']    passport = request.form['passport_number']    expiration = request.form['passport_expiration']    country = request.form['passport_country']    birth = request.form['date_of_birth']	#cursor used to send queries    cursor = conn.cursor()    query = 'SELECT * FROM customer WHERE email = %s'    cursor.execute(query, (email))    data = cursor.fetchone()        error = None    if(data):		#If the previous query returns data, then user exists        error = "This customer already exists"        return render_template('register_customer.html', error = error)        else:        ins = 'INSERT INTO customer VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)'        cursor.execute(ins, (email, name, password, building, street, city, state, phone, passport, expiration, country, birth))        conn.commit() #these changes saved permenantly        cursor.close()        return render_template('index.html')    @app.route('/registerAuth_agent', methods=['GET', 'POST'])def registerAuth_agent():	#grabs information from the forms #should be method POST    email = request.form['email'] #dict key    password = request.form['password']    a_id = request.form['id']        cursor = conn.cursor()    query = 'SELECT * FROM booking_agent WHERE email = %s'    cursor.execute(query, (email))	#stores the results in a variable    data = cursor.fetchone()	#use fetchall() if you are expecting more than 1 data row    error = None    if(data):		#If the previous query returns data, then user exists        error = "This agent already exists"        return render_template('register_agent.html', error = error)    else:        ins = 'INSERT INTO booking_agent VALUES(%s, %s, %s)'        cursor.execute(ins, (email, password, a_id))        conn.commit() #these changes saved permenantly        cursor.close()        return render_template('index.html')    @app.route('/registerAuth_staff', methods=['GET', 'POST'])def registerAuth_staff():	#grabs information from the forms #should be method POST    username = request.form['username'] #dict key    password = request.form['password']    first = request.form['first_name']    last = request.form['last_name']    birth = request.form['date_of_birth']    airline_name = request.form['airline_name']	#cursor used to send queries    cursor = conn.cursor()	#executes query    query = 'SELECT * FROM airline_staff WHERE username = %s'     cursor.execute(query, (username))    data = cursor.fetchone()    error = None    if(data):		#If the previous query returns data, then user exists        error = "This staff already exists"        return render_template('register_staff.html', error = error)    query = 'SELECT * FROM airline WHERE airline_name = %s'    cursor.execute(query, (airline_name))    data = cursor.fetchone()    if (data):    #else:        ins = 'INSERT INTO airline_staff VALUES(%s, %s, %s, %s, %s, %s)'        cursor.execute(ins, (username, password, first, last, birth, airline_name))        conn.commit() #these changes saved permenantly        cursor.close()        return render_template('index.html')    else:         error = "The airline you enter does\'t exist"        return render_template('register_staff.html', error = error)    ####should check whether airline exist!!!'''@app.route('/home')def home():        username = session['username']    cursor = conn.cursor();    query = 'SELECT ts, blog_post FROM blog WHERE username = %s ORDER BY ts DESC'    cursor.execute(query, (username))    data1 = cursor.fetchall()     for each in data1:        print(each['blog_post'])    cursor.close()    return render_template('home.html', username=username, posts=data1)    #相当于后端,return username, posts to home.html(前端),可以作为值使用'''@app.route('/home_customer')def home_customer():    try:        username = session['username_customer']    except:        try:            test = session['email_agent']        except:            try:                test = session['username_staff']            except:                error = 'previous access unauthorized, please login as customer'                return render_template('index.html', error = error)            else:                error = 'previous access unauthorized, please login as customer'                return render_template('home_staff.html', username=test, error=error)        else:            error = 'previous access unauthorized, please login as customer'            return render_template('home_agent.html', username=test, error = error)    return render_template('home_customer.html', username=username)          #error = 'unauthorized access, please login as customer'        #return render_template('index.html', error = error)    '''cursor = conn.cursor();    query = 'SELECT ts, blog_post FROM blog WHERE username = %s ORDER BY ts DESC'    cursor.execute(query, (username))    data1 = cursor.fetchall()     for each in data1:        print(each['blog_post'])    cursor.close()'''    @app.route('/home_agent')def home_agent():    try:        username = session['email_agent']    except:        try:            test = session['username_customer']        except:            try:                test = session['username_staff']            except:                error = 'previous access unauthorized, please login as agent'                return render_template('index.html', error = error)            else:                error = 'previous access unauthorized, please login as agent'                return render_template('home_staff.html', username=test, error=error)        else:            error = 'previous access unauthorized, please login as agent'            return render_template('home_customer.html', username=test, error=error)        #error = 'unauthorized access, please login as booking agent'        #return render_template('index.html', error = error)    return render_template('home_agent.html', username=username)@app.route('/home_staff')def home_staff():    try:        username = session['username_staff']    except:        try:            test = session['username_customer']        except:            try:                test = session['email_agent']            except:                error = 'previous access unauthorized, please login as staff'                return render_template('index.html', error = error)            else:                error = 'previous access unauthorized, please login as staff'                return render_template('home_agent.html', username=test, error=error)        else:            error = 'previous access unauthorized, please login as staff'            return render_template('home_customer.html', username=test, error=error)        #error = 'unauthorized access, please login as airline staff'        #return render_template('index.html', error = error)    return render_template('home_staff.html', username=username)		@app.route('/logout_customer')def logout_customer():	session.pop('username_customer')	return redirect('/')##redirect to hello@app.route('/logout_agent')def logout_agent():	session.pop('email_agent')	return redirect('/')##redirect to hello@app.route('/logout_staff')def logout_staff():	session.pop('username_staff')	return redirect('/')##redirect to helloapp.secret_key = 'some key that you will never guess'#decrypt the data...#Run the app on localhost port 5000#debug = True -> you don't have to restart flask#for changes to go through, TURN OFF FOR PRODUCTIONif __name__ == "__main__":	app.run('127.0.0.1', 5000, debug = True)